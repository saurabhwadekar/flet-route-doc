{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Getting started","text":"|| \u0936\u094d\u0930\u0940 ||"},{"location":"#this-makes-it-easy-to-manage-multiple-views-with-dynamic-routing","title":"This makes it easy to manage multiple views with dynamic routing.","text":"<p>This is an utility module based on repath library which allows matching ExpressJS-like routes and parsing their parameters, for example <code>/account/:account_id/orders/:order_id</code>.</p>"},{"location":"#installation","title":"Installation","text":"<pre><code>pip install flet-route\n</code></pre>"},{"location":"#upgradation","title":"Upgradation","text":"<pre><code>pip install flet-route --upgrade\n</code></pre>"},{"location":"#author","title":"Author","text":"<p>Name :  Saurabh Wadekar Email :  saurabhwadekar420@gmail.com County : \ud83c\uddee\ud83c\uddf3 INDIA \ud83c\uddee\ud83c\uddf3</p> \u2764\ufe0f THANK YOU \u2764\ufe0f <p> </p>"},{"location":"app-middleware/","title":"App Based Middleware","text":""},{"location":"app-middleware/#function-based","title":"Function Based","text":""},{"location":"app-middleware/#class-based","title":"Class Based","text":""},{"location":"basket/","title":"Basket","text":""},{"location":"basket/#what-is-basket","title":"what is basket","text":"<p><code>Basket</code> is one way. To share <code>data</code> or <code>objects</code> in multiple <code>views</code>. It is available as a <code>parameter</code> to every <code>view</code> and <code>middleware</code>. In this, you can perform operations like <code>get</code>, <code>add</code>, <code>update</code>, <code>delete</code> by the methods given below.</p>"},{"location":"basket/#add-variable-to-basket","title":"Add variable to basket","text":"<pre><code>basket.my_data = {\"name\":\"saurabh\",\"mob\":\"1234567890\",\"email\":\"example@gamil.com\"}\n</code></pre>"},{"location":"basket/#get-variable-from-basket","title":"Get variable from basket","text":"<p>variable access from basket <pre><code>basket.my_data\n</code></pre> Accessing a variable using the <code>get()</code> method. In get method we have to give the <code>name</code> of the variable in the form of <code>string</code>. If the variable exists then it will return the <code>value</code> otherwise it will return <code>None</code>. <pre><code>basket.get(\"my_data\")\n</code></pre></p>"},{"location":"basket/#updating-variable-in-basket","title":"Updating variable in basket","text":"<p>If a variable named <code>my_data</code> does not exist in <code>basket</code>, a new variable named <code>my_data</code> will be created. <pre><code>basket.my_data = [1,2,3,4,5,6,7,8]\n</code></pre></p>"},{"location":"basket/#delete-variable-from-basket","title":"Delete variable from basket","text":"<p>deleting a variable using the <code>del</code> keyword <pre><code>del basket.my_data\n</code></pre> deleting a variable using the <code>delete()</code> method. In the <code>delete()</code> method, you have to pass the <code>name</code> of the variable as a <code>string</code>. It will not give an error if a variable with this name does not exist in <code>basket</code>. <pre><code>basket.delete(\"my_data\")\n</code></pre></p>"},{"location":"class-based/","title":"Class Based view","text":""},{"location":"class-based/#directory-structure","title":"Directory Structure","text":""},{"location":"class-based/#mainpy","title":"main.py","text":"<pre><code>import flet as ft\nfrom flet_route import Routing,path\nfrom views.index_view import IndexView # Here IndexView is imported from views/index_view.py\nfrom views.next_view import NextView # Here NextView is imported from views/next_view.py\ndef main(page: ft.Page):\napp_routes = [\npath(\nurl=\"/\", # Here you have to give that url which will call your view on mach\nclear=True, # If you want to clear all the routes you have passed so far, then pass True otherwise False.\nview=IndexView().view # Here you have to pass a function or method which will take page,params and basket and return ft.View (If you are using class based view then you have to pass method name like IndexView().view .)\n),\npath(url=\"/next_view/:my_id\", clear=False, view=NextView().view),\n]\nRouting(\npage=page, # Here you have to pass the page. Which will be found as a parameter in all your views\napp_routes=app_routes, # Here a list has to be passed in which we have defined app routing like app_routes\n)\npage.go(page.route)\nft.app(target=main)\n</code></pre>"},{"location":"class-based/#viewsindex_viewpy","title":"views/index_view.py","text":"<p>This is a basic python <code>class</code> whose <code>view</code> method takes <code>page</code>,<code>params</code> and <code>basket</code> and returns <code>ft.view</code>.</p> <p>In <code>page</code> we get the <code>page</code> passed in <code>Routing</code>.</p> <p>In <code>params</code> we get the object of <code>Params</code> class. In which all the <code>values</code> \u200b\u200bextracted from the URL are in the form of variables.</p> <p>It is not necessary that the name of the method should be <code>view</code>, you can also give a different name.</p> <pre><code>import flet as ft\nfrom flet_route import Params,Basket\nclass IndexView:\ndef __init__(self):\n...\ndef view(self,page:ft.page,params:Params,basket:Basket):\nprint(params)\nprint(basket)\nreturn ft.View(\n\"/\",\ncontrols=[\nft.Text(\"This Is Index View\"),\nft.ElevatedButton(\"Go Next View\", on_click=lambda _: page.go(\"/next_view/10\")),\n]\n)\n</code></pre>"},{"location":"class-based/#viewsnext_viewpy","title":"views/next_view.py","text":"<pre><code>import flet as ft\nfrom flet_route import Params,Basket\nclass NextView:\ndef __init__(self):\n...\ndef view(self,page:ft.page,params:Params,basket:Basket):\nprint(params)\nprint(basket)\nreturn ft.View(\n\"/next_view/:my_id\",\ncontrols=[\nft.Text(\"This Is Next View\"),\nft.ElevatedButton(\"Go Index View\", on_click=lambda _: page.go(\"/\")),\n]\n)\n</code></pre>"},{"location":"class-based/#gif","title":"GIF","text":""},{"location":"flow/","title":"Routing Flow","text":""},{"location":"func-based/","title":"Function Based View","text":""},{"location":"func-based/#directory-structure","title":"Directory Structure","text":""},{"location":"func-based/#mainpy","title":"main.py","text":"<pre><code>import flet as ft\nfrom flet_route import Routing,path\nfrom views.index_view import IndexView # Here IndexView is imported from views/index_view.py\nfrom views.next_view import NextView # Here NextView is imported from views/next_view.py\ndef main(page: ft.Page):\napp_routes = [\npath(\nurl=\"/\", # Here you have to give that url which will call your view on mach\nclear=True, # If you want to clear all the routes you have passed so far, then pass True otherwise False.\nview=IndexView # Here you have to pass a function or method which will take page,params and basket and return ft.View (If you are using function based view then you just have to give the name of the function.)\n), \npath(url=\"/next_view/:my_id\", clear=False, view=NextView),\n]\nRouting(\npage=page, # Here you have to pass the page. Which will be found as a parameter in all your views\napp_routes=app_routes, # Here a list has to be passed in which we have defined app routing like app_routes\n)\npage.go(page.route)\nft.app(target=main)\n</code></pre>"},{"location":"func-based/#viewsindex_viewpy","title":"views/index_view.py","text":"<p>This is a basic python function that takes <code>page</code>,<code>params</code> and <code>basket</code> and returns <code>ft.View</code>.</p> <p>In <code>page</code> we get the <code>page</code> passed in <code>Routing</code>.</p> <p>In <code>params</code> we get the object of <code>Params</code> class. In which all the <code>values</code> \u200b\u200bextracted from the URL are in the form of variables.</p> <pre><code>import flet as ft\nfrom flet_route import Params,Basket\ndef IndexView(page:ft.Page,params:Params,basket:Basket):\nprint(params)\nprint(basket)\nreturn ft.View(\n\"/\",\ncontrols=[\nft.Text(\"This Is Index View\"),\nft.ElevatedButton(\"Go Next View\", on_click=lambda _: page.go(\"/next_view/10\")),\n]\n)\n</code></pre>"},{"location":"func-based/#viewsnext_viewpy","title":"views/next_view.py","text":"<pre><code>import flet as ft\nfrom flet_route import Params,Basket\ndef NextView(page:ft.Page,params:Params,basket:Basket):\nprint(params)\nprint(basket)\nreturn ft.View(\n\"/next_view/:my_id\",\ncontrols=[\nft.Text(\"This Is Next View\"),\nft.ElevatedButton(\"Go Index View\", on_click=lambda _: page.go(\"/\")),\n]\n)\n</code></pre>"},{"location":"func-based/#gif","title":"GIF","text":""},{"location":"params/","title":"Params","text":""},{"location":"params/#what-is-params","title":"what is params","text":"<p><code>params</code> we get as parameter in view. which is an object of <code>Params</code> class In which we get all the <code>values</code> \u200b\u200bextracted from <code>url</code> in the form of <code>variables</code>. These variables can also be <code>get</code>,<code>add</code>, <code>delete</code>, <code>update</code> in the following ways. This would be useful in middlewares in general.</p>"},{"location":"params/#add-variable-to-params","title":"Add variable to params","text":"<pre><code>params.stu_id = 11\n</code></pre>"},{"location":"params/#get-variable-from-params","title":"Get variable from params","text":"<p>variable access from <code>params</code> <pre><code>params.stu_id\n</code></pre> Accessing a variable using the <code>get()</code> method. In get method we have to give the <code>name</code> of the variable in the form of <code>string</code>. If the variable exists then it will return the <code>value</code> otherwise it will return <code>None</code>. <pre><code>params.get(\"stu_id\")\n</code></pre></p>"},{"location":"params/#updating-variable-in-params","title":"Updating variable in params","text":"<p>If a variable named <code>stu_id</code> does not exist in <code>params</code>, a new variable named <code>stu_id</code> will be created. <pre><code>params.stu_id = 22\n</code></pre></p>"},{"location":"params/#delete-variable-from-params","title":"Delete variable from params","text":"<p>deleting a variable using the <code>del</code> keyword <pre><code>del params.stu_id\n</code></pre> deleting a variable using the <code>delete()</code> method. In the <code>delete()</code> method, you have to pass the <code>name</code> of the variable as a <code>string</code>. It will not give an error if a variable with this name does not exist in <code>params</code>. <pre><code>params.delete(\"stu_id\")\n</code></pre></p>"},{"location":"sample-apps/","title":"Sample Apps","text":""},{"location":"sample-apps/#1-note-app","title":"1) Note App","text":""},{"location":"url-middleware/","title":"Url Based Middleware","text":""},{"location":"url-middleware/#function-based","title":"Function Based","text":""},{"location":"url-middleware/#class-based","title":"Class Based","text":""},{"location":"samples/noteapp/","title":"Note App","text":""},{"location":"samples/noteapp/#directory-structure","title":"Directory Structure","text":""},{"location":"samples/noteapp/#mainpy","title":"main.py","text":"<pre><code>import flet as ft\nfrom flet_route import Routing,path\nfrom views.index_view import IndexView\nfrom views.new_note_view import NewNoteView\nfrom views.old_note_view import OldNoteView\nfrom db import create_tables\ncreate_tables()\ndef main(page: ft.Page):\napp_routes = [\npath(url=\"/\", clear=True, view=IndexView),\npath(url=\"/new_note/\", clear=False, view=NewNoteView),\npath(url=\"/old_note/:id\", clear=False, view=OldNoteView),\n]\nRouting(page=page,app_routes=app_routes)\npage.go(page.route)\nft.app(target=main)\n</code></pre>"},{"location":"samples/noteapp/#dbpy","title":"db.py","text":"<pre><code>from sqlmodel import (\nSQLModel,\ncreate_engine,\nSession,\nField,\nselect,\n)\nfrom typing import Optional\ndatabase_file_name = \"database.sqlite3\"\nengine = create_engine(f\"sqlite:///{database_file_name}\")\nclass Notes(SQLModel,table=True):\nid : Optional[int] = Field(primary_key=True,default=None,nullable=False)\ntitle : str = Field(nullable=False)\nnote : str = Field(nullable=False)\ndef add(self,title,note):\nnew_note = Notes(title=title,note=note)\nwith Session(engine) as session:\nsession.add(new_note)\nsession.commit()\nreturn True\ndef update(self,id,title,note):\nwith Session(engine) as session:\nstatement = select(Notes).where(Notes.id == id)\nresults = session.exec(statement)\nold_note = results.one()\nold_note.title = title\nold_note.note = note\nsession.add(old_note)\nsession.commit()\nreturn True\ndef get_all(self):\nwith Session(engine) as session:\nstatement = select(Notes)\nresults = session.exec(statement)\nreturn results.all()\ndef get_by_id(self,id):\nwith Session(engine) as session:\nstatement = select(Notes).where(Notes.id == id)\nresults = session.exec(statement)\nreturn results.first()\ndef delete(self,id):\nwith Session(engine) as session:\nstatement = select(Notes).where(Notes.id == id)\nresults = session.exec(statement).first()\nsession.delete(results)\nsession.commit()\nreturn True\ndef create_tables():\nSQLModel.metadata.create_all(engine)\n</code></pre>"},{"location":"samples/noteapp/#viewsindex_viewpy","title":"views/index_view.py","text":"<pre><code>import flet as ft\nfrom flet_route import Params, Basket\nfrom db import Notes\ndef IndexView(page: ft.Page, params: Params, basket: Basket):\nif basket.get(\"notes\") == None:\nbasket.notes = Notes()\ndef delete_note(id):\nbasket.notes.delete(id = id)\nget_all_notes()\npage.update()\nrow = []\ndef get_all_notes():\nrow.clear()\nfor i in basket.notes.get_all():\nrow.append(\nft.Stack(\n[\nft.Container(\nheight=70,\nborder_radius=10,\nborder=ft.Border(\ntop=ft.BorderSide(width=1),\nbottom=ft.BorderSide(width=1),\nleft=ft.BorderSide(width=1),\nright=ft.BorderSide(width=1)\n)\n),\nft.Container(\ncontent=ft.Icon(ft.icons.NOTE, size=50),\ntop=10,\nleft=5\n),\nft.Text(\nmax_lines=1,\noverflow=ft.TextOverflow.CLIP,\ntop=20,\nleft=60,\nvalue=i.title,\nsize=20\n),\nft.Container(\nheight=70,\nborder_radius=10,\non_click=lambda e,id=i.id: page.go(f\"/old_note/{id}\")\n),\nft.IconButton(\nicon=ft.icons.DELETE,\nright=5,\ntop=10,\non_click= lambda e,id=i.id: delete_note(id)\n),\n]\n)\n)\nget_all_notes()\nreturn ft.View(\n\"/\",\ncontrols=[\nft.AppBar(\nleading=ft.Icon(ft.icons.NOTE),\nleading_width=40,\ntitle=ft.Text(\"Note App\"),\ncenter_title=False,\nactions=[\nft.IconButton(\nft.icons.NOTE_ADD,\non_click=lambda e: page.go(\"/new_note/\")\n),\n],\n),\nft.Column(row)\n],\nscroll=\"auto\"\n)\n</code></pre>"},{"location":"samples/noteapp/#viewsnew_note_viewpy","title":"views/new_note_view.py","text":"<pre><code>import flet as ft\nfrom flet_route import Params, Basket\ndef NewNoteView(page: ft.Page, params: Params, basket: Basket):\nref_title = ft.Ref[ft.TextField]()\nref_text = ft.Ref[ft.TextField]()\ndef save_note(e):\nbasket.notes.add(\ntitle = ref_title.current.value,\nnote = ref_text.current.value,\n)\npage.go(\"/\")\nreturn ft.View(\n\"/new_note/\",\ncontrols=[\nft.AppBar(\ntitle=ft.Text(\"New Note\"),\nactions=[\nft.IconButton(\nft.icons.SAVE,\non_click= save_note\n),\n],),\nft.TextField(\nref=ref_title,\nlabel=\"Title\",\n),\nft.TextField(\nref=ref_text,\nexpand=True,\nmultiline=True,\nvalue=\"\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\",\n),\n],\nscroll=\"auto\"\n)\n</code></pre>"},{"location":"samples/noteapp/#viewsold_note_viewpy","title":"views/old_note_view.py","text":"<pre><code>import flet as ft\nfrom flet_route import Params, Basket\ndef NewNoteView(page: ft.Page, params: Params, basket: Basket):\nref_title = ft.Ref[ft.TextField]()\nref_text = ft.Ref[ft.TextField]()\ndef save_note(e):\nbasket.notes.add(\ntitle = ref_title.current.value,\nnote = ref_text.current.value,\n)\npage.go(\"/\")\nreturn ft.View(\n\"/new_note/\",\ncontrols=[\nft.AppBar(\ntitle=ft.Text(\"New Note\"),\nactions=[\nft.IconButton(\nft.icons.SAVE,\non_click= save_note\n),\n],),\nft.TextField(\nref=ref_title,\nlabel=\"Title\",\n),\nft.TextField(\nref=ref_text,\nexpand=True,\nmultiline=True,\nvalue=\"\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\",\n),\n],\nscroll=\"auto\"\n)\n</code></pre>"},{"location":"samples/noteapp/#gif","title":"GIF","text":""}]}